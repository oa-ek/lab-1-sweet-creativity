// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SweetCreativity.Core.Context;

#nullable disable

namespace SweetCreativity.Core.Migrations
{
    [DbContext(typeof(SweetCreativityContext))]
    partial class SweetCreativityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bb6ca491-80f7-4b27-8fd5-f6f951bfd83b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "45d8d6fb-7280-437e-8270-2e6b89d15867",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "3a05ece2-b99b-4746-a7a3-68b54e2ad82f",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "4bcea3b6-fd74-47b9-8c46-70908bd4afce",
                            RoleId = "bb6ca491-80f7-4b27-8fd5-f6f951bfd83b"
                        },
                        new
                        {
                            UserId = "4bcea3b6-fd74-47b9-8c46-70908bd4afce",
                            RoleId = "3a05ece2-b99b-4746-a7a3-68b54e2ad82f"
                        },
                        new
                        {
                            UserId = "ce21d04c-a441-4c40-adb1-7a0d325b112f",
                            RoleId = "3a05ece2-b99b-4746-a7a3-68b54e2ad82f"
                        },
                        new
                        {
                            UserId = "46eb00ef-8997-40da-ab98-bc02a14c8db3",
                            RoleId = "45d8d6fb-7280-437e-8270-2e6b89d15867"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SweetCreativity.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NameCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NameCategory")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameCategory = "Торти"
                        },
                        new
                        {
                            Id = 2,
                            NameCategory = "Тістечка"
                        },
                        new
                        {
                            Id = 3,
                            NameCategory = "Цукерки"
                        },
                        new
                        {
                            Id = 4,
                            NameCategory = "Печиво"
                        },
                        new
                        {
                            Id = 5,
                            NameCategory = "Вафлі"
                        });
                });

            modelBuilder.Entity("SweetCreativity.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConstructionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtResponse")
                        .HasColumnType("datetime2");

                    b.Property<string>("TextComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ConstructionId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SweetCreativity.Core.Entities.Construction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Additionaly")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAtOrder")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Form")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameConstruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserSellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViewDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Constructions");
                });

            modelBuilder.Entity("SweetCreativity.Core.Entities.Listing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CoverPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAtListing")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Listings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CoverPath = "\\img\\listing\\no_cover.jpg",
                            CreatedAtListing = new DateTime(2023, 12, 12, 20, 40, 38, 234, DateTimeKind.Local).AddTicks(9534),
                            Description = " Це відомий і популярний торт, який складається з тонких шарів бісквіту і вершкового крему.",
                            Location = "Lviv",
                            Price = 165,
                            Product = "Борошно, вершкове масло, яйця, оцет, цукор, ванільний цукор або ванільний екстракт, кукурудзяний крохмаль, вершки, сіль, прикраси (за бажанням).",
                            Title = "Торт Наполеон",
                            UserId = "ce21d04c-a441-4c40-adb1-7a0d325b112f",
                            Weight = 1000
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CoverPath = "\\img\\listing\\no_cover.jpg",
                            CreatedAtListing = new DateTime(2023, 12, 12, 20, 40, 38, 234, DateTimeKind.Local).AddTicks(9603),
                            Description = "Гармонійне поєднання повітряного шоколадного тіста мафіну з ніжно-солодкою вершковою начинкою.",
                            Location = "Rivne",
                            Price = 180,
                            Product = "Борошно пшеничне, цукор-пісок, суміш “Мафін шоколадний”, олія рослинна, меланж, вода. Начинка: згущене молоко “Іриска”з вершками.",
                            Title = "Мафіни",
                            UserId = "4bcea3b6-fd74-47b9-8c46-70908bd4afce",
                            Weight = 80
                        });
                });

            modelBuilder.Entity("SweetCreativity.Core.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAtOrder")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ListingId")
                        .HasColumnType("int");

                    b.Property<string>("ListingPhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOrder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceOne")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAtOrder = new DateTime(2023, 12, 12, 20, 40, 38, 234, DateTimeKind.Local).AddTicks(9666),
                            CustomerNumber = 985684335,
                            ListingId = 1,
                            NameOrder = "Торт Наполеон",
                            PriceOne = 0m,
                            Quantity = 1,
                            TotalPrice = 250m,
                            UserId = "46eb00ef-8997-40da-ab98-bc02a14c8db3"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAtOrder = new DateTime(2023, 12, 12, 20, 40, 38, 234, DateTimeKind.Local).AddTicks(9673),
                            CustomerNumber = 985688735,
                            ListingId = 2,
                            NameOrder = "Торт Спартак",
                            PriceOne = 0m,
                            Quantity = 1,
                            TotalPrice = 400m,
                            UserId = "4bcea3b6-fd74-47b9-8c46-70908bd4afce"
                        });
                });

            modelBuilder.Entity("SweetCreativity.Core.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ListingId")
                        .HasColumnType("int");

                    b.Property<int>("RatingPoint")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("SweetCreativity.Core.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAtResponse")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ListingId")
                        .HasColumnType("int");

                    b.Property<string>("TextResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("SweetCreativity.Core.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusName = "Прийнято"
                        },
                        new
                        {
                            Id = 2,
                            StatusName = "Виконується"
                        },
                        new
                        {
                            Id = 3,
                            StatusName = "Не прийнято"
                        });
                });

            modelBuilder.Entity("SweetCreativity.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UrlSocialnetwork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4bcea3b6-fd74-47b9-8c46-70908bd4afce",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ebd8fa0-a8d5-439e-b36e-8631e5521b3f",
                            CoverPath = "\\img\\user\\no_cover.jpg",
                            Email = "taniabondar@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Тетяна Бондар",
                            LockoutEnabled = false,
                            NormalizedEmail = "TANIABONDAR@GMAIL.COM",
                            NormalizedUserName = "TANIABONDAR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBAUk6B/piIW7RA/o49zqUO/eOuHbvqoiK6+qhZOOc8WQDqHqaWK+ylFvK7LQ0YyUQ==",
                            PhoneNumber = 985674335,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb65eadf-7a40-438d-8374-81914b2f565e",
                            TwoFactorEnabled = false,
                            UrlSocialnetwork = "@taniabondar23",
                            UserName = "taniabondar@gmail.com"
                        },
                        new
                        {
                            Id = "46eb00ef-8997-40da-ab98-bc02a14c8db3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e522eb64-ec9f-41ee-b1ab-91b7394cfd85",
                            CoverPath = "\\img\\user\\no_cover.jpg",
                            Email = "olenatkachuk@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Олена Ткачук",
                            LockoutEnabled = false,
                            NormalizedEmail = "OLENATKACHUK@GMAIL.COM",
                            NormalizedUserName = "OLENATKACHUK@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJKViv/zX3oHlfEFGqj+d7eJtPB0H3Fiv8vDR34ZfiFKI6fl0zXBwI0Q18lbUBeh6g==",
                            PhoneNumber = 986390482,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6a116c9-a3f1-4d97-92de-f18659d79edd",
                            TwoFactorEnabled = false,
                            UrlSocialnetwork = "@olena_tkachuk",
                            UserName = "olenatkachuk@gmail.com"
                        },
                        new
                        {
                            Id = "ce21d04c-a441-4c40-adb1-7a0d325b112f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "961bff1e-9806-498e-9a70-6ba313088239",
                            CoverPath = "\\img\\user\\no_cover.jpg",
                            Email = "melnykadrian@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Адріан Мельник",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELNYKADRIAN@GMAIL.COM",
                            NormalizedUserName = "MELNYKADRIAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJmwLzv9ixIfglZ72QaOxP8rCcP0w7PzI4S1F83kTAao7eYskL/OsvtSU2RwQJRkdQ==",
                            PhoneNumber = 984568310,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df7a9790-37f0-441b-b688-1fa0ca81055c",
                            TwoFactorEnabled = false,
                            UrlSocialnetwork = "@adriannmelnykk",
                            UserName = "melnykadrian@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SweetCreativity.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SweetCreativity.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SweetCreativity.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SweetCreativity.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SweetCreativity.Core.Entities.Comment", b =>
                {
                    b.HasOne("SweetCreativity.Core.Entities.Construction", "Construction")
                        .WithMany("Comments")
                        .HasForeignKey("ConstructionId");

                    b.HasOne("SweetCreativity.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Construction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SweetCreativity.Core.Entities.Construction", b =>
                {
                    b.HasOne("SweetCreativity.Core.Entities.Status", "Status")
                        .WithMany("Constructions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SweetCreativity.Core.Entities.User", "User")
                        .WithMany("Constructions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SweetCreativity.Core.Entities.Listing", b =>
                {
                    b.HasOne("SweetCreativity.Core.Entities.Category", "Category")
                        .WithMany("Listings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SweetCreativity.Core.Entities.User", "User")
                        .WithMany("Listings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SweetCreativity.Core.Entities.Order", b =>
                {
                    b.HasOne("SweetCreativity.Core.Entities.Listing", "Listing")
                        .WithMany("Orders")
                        .HasForeignKey("ListingId");

                    b.HasOne("SweetCreativity.Core.Entities.Status", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SweetCreativity.Core.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Listing");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SweetCreativity.Core.Entities.Rating", b =>
                {
                    b.HasOne("SweetCreativity.Core.Entities.Listing", "Listing")
                        .WithMany("Ratings")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SweetCreativity.Core.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId");

                    b.Navigation("Listing");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SweetCreativity.Core.Entities.Response", b =>
                {
                    b.HasOne("SweetCreativity.Core.Entities.Listing", "Listing")
                        .WithMany("Responses")
                        .HasForeignKey("ListingId");

                    b.HasOne("SweetCreativity.Core.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId");

                    b.Navigation("Listing");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SweetCreativity.Core.Entities.Category", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("SweetCreativity.Core.Entities.Construction", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("SweetCreativity.Core.Entities.Listing", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Ratings");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("SweetCreativity.Core.Entities.Status", b =>
                {
                    b.Navigation("Constructions");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SweetCreativity.Core.Entities.User", b =>
                {
                    b.Navigation("Constructions");

                    b.Navigation("Listings");

                    b.Navigation("Orders");

                    b.Navigation("Ratings");

                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
